{"version":3,"sources":["App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","paddingTop","display","alignItems","paper","padding","spacing","margin","width","button","marginRight","buttonProgress","color","pink","A400","position","top","left","marginTop","marginLeft","startButtonSuccess","backgroundColor","green","ErrorDialog","props","React","useState","open","setOpen","handleClose","Dialog","style","whiteSpace","onClose","aria-labelledby","aria-describedby","DialogContent","DialogContentText","id","errorDescription","DialogActions","Button","onClick","autoFocus","App","classes","inProgress","setInProgress","success","setSuccess","error","setError","timer","useRef","useEffect","clearTimeout","current","gattServer","txdCharacteristic","startButtonClassname","clsx","startPayload","Uint8Array","endPayload","logProgress","x","console","log","bluetoothStart","a","navigator","bluetooth","requestDevice","filters","namePrefix","optionalServices","bluetoothDevice","gatt","connect","getPrimaryService","service","getCharacteristic","writeValue","bluetoothEnd","disconnect","handleBluetoothError","toString","match","className","Grid","container","direction","justify","item","Paper","variant","startIcon","disabled","catch","window","setTimeout","CircularProgress","size","href","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"2WAeMA,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJC,SAAU,EACVC,WAAY,OACZC,QAAS,OACTC,WAAY,UAEdC,MAAO,CACLC,QAASR,EAAMS,QAAQ,GACvBC,OAAQV,EAAMS,QAAQ,GACtBE,MAAOX,EAAMS,QAAQ,KAEvBG,OAAQ,CACN,QAAS,CACPC,YAAab,EAAMS,QAAQ,KAG/BK,eAAgB,CAEdC,MAAOC,IAAKC,KACZC,SAAU,WACVC,IAAK,MACLC,KAAM,MACNC,WAAY,GACZC,YAAa,IAEfC,mBAAoB,CAClBC,gBAAiBC,IAAM,KACvB,UAAW,CACTD,gBAAiBC,IAAM,YA4JzBC,EAAc,SAACC,GAAyC,IAAD,EACnCC,IAAMC,UAAS,GADoB,mBACpDC,EADoD,KAC9CC,EAD8C,KAGrDC,EAAc,WAClBD,GAAQ,IAGV,OACE,eAACE,EAAA,EAAD,CAAQC,MAAO,CAACC,WAAY,YAC1BL,KAAMA,EACNM,QAASJ,EACTK,kBAAgB,qBAChBC,mBAAiB,2BAJnB,UAME,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAmBC,GAAG,2BAAtB,SACGd,EAAMe,qBAGX,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAQC,QAASb,EAAajB,MAAM,UAAU+B,WAAS,EAAvD,0BAQOC,EAxKH,WACV,IAAMC,EAAUlD,IADA,EAEoB8B,IAAMC,UAAS,GAFnC,mBAEToB,EAFS,KAEGC,EAFH,OAGctB,IAAMC,UAAS,GAH7B,mBAGTsB,EAHS,KAGAC,EAHA,OAIUxB,IAAMC,SAAS,IAJzB,mBAITwB,EAJS,KAIFC,EAJE,KAKVC,EAAQ3B,IAAM4B,SAEpB5B,IAAM6B,WAAU,WACd,OAAO,WACLC,aAAaH,EAAMI,YAEpB,IAEH,IA8BIC,EACAC,EA/BEC,EAAuBC,YAAK,eAC/Bf,EAAQzB,mBAAqB4B,IAyB5Ba,EAAe,IAAIC,WAAW,CAAC,IAAM,IAAM,EAAM,IAAM,EAAM,GAAM,IAAM,EAAM,IAAM,IAAM,IAAM,GAAM,EAAM,EAAM,EAAM,EAAM,EAAM,IAAM,GAAM,IACjJC,EAAa,IAAID,WAAW,CAAC,IAAM,IAAM,EAAM,IAAM,EAAM,IAMzDE,EAAc,SAACC,GAEnB,OADAC,QAAQC,IAAI,WAAYF,GACjBA,GAGHG,EAAc,uCAAG,8BAAAC,EAAA,sEAEOC,UAAUC,UAAUC,cAAc,CAC5DC,QAAS,CAAC,CAAEC,WAAY,UACxBC,iBAAkB,CAAC,SAJA,cAEjBC,EAFiB,OAMrBZ,EAAYY,GANS,SAQFA,EAAgBC,KAAMC,UARpB,cAQrBrB,EARqB,OAWrBO,EAAYP,GAXS,UAaDA,EAAWsB,kBAAkB,OAb5B,eAajBC,EAbiB,OAcrBhB,EAAYgB,GAdS,UAiBKA,EAAQC,kBAAkB,OAjB/B,eAiBrBvB,EAjBqB,OAkBrBM,EAAYN,GAEZQ,QAAQC,IAAI,YAAaN,GApBJ,KAqBrBG,EArBqB,UAqBHN,EAAkBwB,WAAWrB,GArB1B,+EAAH,qDAwBdsB,EAAY,uCAAG,sBAAAd,EAAA,6DACnBH,QAAQC,IAAI,YAAaJ,GADN,SAEbL,EAAkBwB,WAAWnB,GAFhB,uBAGbN,EAAW2B,aAHE,2CAAH,qDAMZC,EAAuB,SAACnC,GACxBA,EAAMoC,WAAWC,MAAM,oBAElBrC,EAAMoC,WAAWC,MAAM,gCAC9BpC,EAAS,gLAETA,EAAS,mCAAYD,EAAMoC,WAAa,yHAI5C,OACE,sBAAKE,UAAW3C,EAAQ9C,KAAxB,UACGmD,GAAS,cAAC,EAAD,CAAaX,iBAAkBW,IACzC,eAACuC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASC,QAAQ,aAAazF,WAAW,SAAnE,UAGE,cAACsF,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CAAON,UAAW3C,EAAQzC,MAA1B,SACE,sBAAKoF,UAAW3C,EAAQpC,OAAxB,UACE,eAACgC,EAAA,EAAD,CACEsD,QAAQ,YACRnF,MAAM,UACNoF,UAAW,cAAC,IAAD,IACXR,UAAW7B,EACXsC,SAAUnD,EACVJ,QAzFiB,WACxBI,IACHG,GAAW,GACXF,GAAc,GACdqB,IAAiB8B,OAAM,SAAChD,GAAD,OAAWmC,EAAqBnC,MACvDE,EAAMI,QAAU2C,OAAOC,YAAW,WAChCnD,GAAW,GACXF,GAAc,GACdI,EAAS,MACR,OA0EK,yBAQCL,GAAc,cAACuD,EAAA,EAAD,CAAkBC,KAAM,GAAId,UAAW3C,EAAQlC,oBAE9D,cAAC8B,EAAA,EAAD,CACEsD,QAAQ,YACRnF,MAAM,UACNoF,UAAW,cAAC,IAAD,IACXtD,QApFe,WAE3ByC,IACInC,GACFC,GAAW,IA4EH,iCAYN,cAACwC,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CAAON,UAAW3C,EAAQzC,MAA1B,SACE,sBAAKoF,UAAW3C,EAAQpC,OAAxB,UACE,cAACgC,EAAA,EAAD,CAAQsD,QAAQ,WAAWQ,KAAK,2DAAhC,sCAGA,cAAC9D,EAAA,EAAD,CAAQsD,QAAQ,WAAWQ,KAAK,wCAAhC,8CCjLRC,EAAcC,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASpB,MAAM,2DA0CnC,SAASqB,EAAgBC,EAAeC,GACtCxC,UAAUyC,cACPC,SAASH,GACTI,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfjD,UAAUyC,cAAcS,YAI1BtD,QAAQC,IACN,+GAKE2C,GAAUA,EAAOW,UACnBX,EAAOW,SAASP,KAMlBhD,QAAQC,IAAI,sCAGR2C,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUR,WAO5BhB,OAAM,SAAChD,GACNgB,QAAQhB,MAAM,4CAA6CA,MC5FjEyE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDcnB,SAAkBjB,GACvB,GAA6C,kBAAmBxC,UAAW,CAGzE,GADkB,IAAI0D,IAAIC,IAAwB9B,OAAOO,SAASH,MACpD2B,SAAW/B,OAAOO,SAASwB,OAIvC,OAGF/B,OAAOgC,iBAAiB,QAAQ,WAC9B,IAAMtB,EAAK,UAAMoB,IAAN,sBAEPzB,IAgEV,SAAiCK,EAAeC,GAE9CsB,MAAMvB,EAAO,CACXwB,QAAS,CAAE,iBAAkB,YAE5BpB,MAAK,SAACqB,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CpE,UAAUyC,cAAc4B,MAAM1B,MAAK,SAACC,GAClCA,EAAa0B,aAAa3B,MAAK,WAC7Bd,OAAOO,SAASmC,eAKpBjC,EAAgBC,EAAOC,MAG1BZ,OAAM,WACLhC,QAAQC,IAAI,oEAtFV2E,CAAwBjC,EAAOC,GAI/BxC,UAAUyC,cAAc4B,MAAM1B,MAAK,WACjC/C,QAAQC,IACN,+GAMJyC,EAAgBC,EAAOC,OCpC/BiC,K","file":"static/js/main.6e2f0c25.chunk.js","sourcesContent":["import React from 'react'\nimport clsx from 'clsx'\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\nimport { pink, green } from '@material-ui/core/colors'\nimport Grid from '@material-ui/core/Grid'\nimport Paper from '@material-ui/core/Paper'\nimport Button from '@material-ui/core/Button'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport BathtubIcon from '@material-ui/icons/Bathtub'\nimport PanToolIcon from '@material-ui/icons/PanTool'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogActions from '@material-ui/core/DialogActions'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      paddingTop: '20px',\n      display: 'flex',\n      alignItems: 'center',\n    },\n    paper: {\n      padding: theme.spacing(2),\n      margin: theme.spacing(1),\n      width: theme.spacing(36),\n    },\n    button: {\n      '& > *': {\n        marginRight: theme.spacing(2),\n      },\n    },\n    buttonProgress: {\n      // default secondary color\n      color: pink.A400,\n      position: 'absolute',\n      top: '50%',\n      left: '50%',\n      marginTop: -12,\n      marginLeft: -12,\n    },\n    startButtonSuccess: {\n      backgroundColor: green[500],\n      '&:hover': {\n        backgroundColor: green[700],\n      },\n    },\n  }),\n)\n\n// Abandoned planned feature: auto start the last connected device\n// Due to the lack of implementations of necessary APIs in Web Bluetooth\n//\n// const AutoStartPanel = () => {\n//   const classes = useStyles()\n//   // todo\n//   let lastConnected = localStorage.getItem(\"lastConnected\")\n//   return\n// }\n\nconst App = () => {\n  const classes = useStyles()\n  const [inProgress, setInProgress] = React.useState(false)\n  const [success, setSuccess] = React.useState(false)\n  const [error, setError] = React.useState(\"\")\n  const timer = React.useRef<number>()\n\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(timer.current)\n    }\n  }, [])\n\n  const startButtonClassname = clsx({\n    [classes.startButtonSuccess]: success,\n  })\n\n  const handleStartButtonClick = () => {\n    if (!inProgress) {\n      setSuccess(false)\n      setInProgress(true)\n      bluetoothStart().catch((error) => handleBluetoothError(error))\n      timer.current = window.setTimeout(() => {\n        setSuccess(true)\n        setInProgress(false)\n        setError(\"\")\n      }, 8000)\n    }\n  }\n\n  const handleEndButtonClick = () => {\n    // Always run BluetoothEnd() ; meanwhile if start button is green, reset it\n    bluetoothEnd()\n    if (success) {\n      setSuccess(false)\n    }\n  }\n\n  // Bluetooth control begins\n  let startPayload = new Uint8Array([0xFE, 0xFE, 0x09, 0xB2, 0x01, 0x2B, 0xDC, 0x00, 0x70, 0xE2, 0xEB, 0x20, 0x01, 0x01, 0x00, 0x00, 0x00, 0x6C, 0x30, 0x00])\n  let endPayload = new Uint8Array([0xFE, 0xFE, 0x09, 0xB3, 0x00, 0x00])\n\n  // Dirty hack, in order to make BluetoothEnd() be functional without more complex tricks\n  let gattServer: any\n  let txdCharacteristic: any\n\n  const logProgress = (x: any) => {\n    console.log(\"Current:\", x)\n    return x;\n  }\n\n  const bluetoothStart = async () => {\n    // BLE device (a.k.a peripheral) => GATT server => service => characteristic => writeValue()\n    let bluetoothDevice = await navigator.bluetooth.requestDevice({\n      filters: [{ namePrefix: \"Water\" }],\n      optionalServices: [0xF1F0]\n    })\n    logProgress(bluetoothDevice)\n\n    gattServer = await bluetoothDevice.gatt!.connect()/* .catch((error: any) => {\n      throw \"连接失败。对端拒绝了连接。\"\n    }) */\n    logProgress(gattServer)\n\n    let service = await gattServer.getPrimaryService(0xF1F0)\n    logProgress(service)\n\n    // Target characteristic name = TXD, uuid = 0xF1F1\n    txdCharacteristic = await service.getCharacteristic(0xF1F1)\n    logProgress(txdCharacteristic)\n\n    console.log(\"Writing: \", startPayload)\n    logProgress(await txdCharacteristic.writeValue(startPayload))\n  }\n\n  const bluetoothEnd = async () => {\n    console.log(\"Writing: \", endPayload)\n    await txdCharacteristic.writeValue(endPayload)\n    await gattServer.disconnect()\n  }\n\n  const handleBluetoothError = (error: { toString: () => string }) => {\n    if (error.toString().match(/User cancelled/)) \n      return // User's cancellation won't be considered as an error\n    else if (error.toString().match(/'requestDevice' of undefined/))\n      setError(\"找不到蓝牙硬件，或浏览器不支持。\\n\\n请参考下方“疑难解答”。\")\n    else \n      setError(\"未知错误：\\n\" + error.toString() + \"\\n\\n这可能是一个Bug，请截图并反馈给开发者，\")\n  }\n\n\n  return (\n    <div className={classes.root}>\n      {error && <ErrorDialog errorDescription={error}/>}\n      <Grid container direction=\"column\" justify=\"flex-start\" alignItems=\"center\">\n\n        {/* Main control panel */}\n        <Grid item>\n          <Paper className={classes.paper}>\n            <div className={classes.button}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                startIcon={<BathtubIcon />}\n                className={startButtonClassname}\n                disabled={inProgress}\n                onClick={handleStartButtonClick}>\n                启动\n              {inProgress && <CircularProgress size={24} className={classes.buttonProgress} />}\n              </Button>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                startIcon={<PanToolIcon />}\n                onClick={handleEndButtonClick}>\n                结束\n              </Button>\n            </div>\n          </Paper>\n        </Grid>\n\n        {/* Credits */}\n        <Grid item>\n          <Paper className={classes.paper}>\n            <div className={classes.button}>\n              <Button variant=\"outlined\" href=\"https://github.com/celesWuff/waterctl/blob/master/FAQ.md\">\n                疑难解答\n              </Button>\n              <Button variant=\"outlined\" href=\"https://github.com/celesWuff/waterctl\">\n                源代码\n              </Button>\n            </div>\n          </Paper>\n        </Grid>\n\n      </Grid>\n    </div>\n  )\n}\n\nconst ErrorDialog = (props: { errorDescription: string }) => {\n  const [open, setOpen] = React.useState(true)\n\n  const handleClose = () => {\n    setOpen(false)\n  }\n\n  return (\n    <Dialog style={{whiteSpace: \"pre-wrap\"}}\n      open={open}\n      onClose={handleClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          {props.errorDescription}\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose} color=\"primary\" autoFocus>\n          好\n      </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}