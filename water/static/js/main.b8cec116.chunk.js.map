{"version":3,"sources":["App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","paddingTop","display","alignItems","paper","padding","spacing","margin","width","button","marginRight","buttonProgress","color","pink","A400","position","top","left","marginTop","marginLeft","startButtonSuccess","backgroundColor","green","ErrorDialog","props","React","useState","open","setOpen","handleClose","Dialog","style","whiteSpace","onClose","aria-labelledby","aria-describedby","DialogContent","DialogContentText","id","errorDescription","DialogActions","Button","onClick","autoFocus","App","classes","inProgress","setInProgress","success","setSuccess","error","setError","Object","gattServer","setGattServer","characteristic","setCharacteristic","timer","useRef","useEffect","clearTimeout","current","startButtonClassname","clsx","logProgress","x","console","log","bluetoothStart","a","navigator","bluetooth","requestDevice","filters","namePrefix","optionalServices","bluetoothDevice","gatt","connect","getPrimaryService","service","getCharacteristic","startPayload","Uint8Array","writeValue","bluetoothEnd","endPayload","disconnect","handleBluetoothError","toString","match","className","Grid","container","direction","justify","item","Paper","variant","startIcon","disabled","catch","window","setTimeout","CircularProgress","size","href","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.b8cec116.chunk.js","sourcesContent":["import React from 'react'\r\nimport clsx from 'clsx'\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\r\nimport { pink, green } from '@material-ui/core/colors'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Button from '@material-ui/core/Button'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport BathtubIcon from '@material-ui/icons/Bathtub'\r\nimport PanToolIcon from '@material-ui/icons/PanTool'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogContentText from '@material-ui/core/DialogContentText'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n      paddingTop: '20px',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      margin: theme.spacing(1),\r\n      width: theme.spacing(36),\r\n    },\r\n    button: {\r\n      '& > *': {\r\n        marginRight: theme.spacing(2),\r\n      },\r\n    },\r\n    buttonProgress: {\r\n      // default secondary color\r\n      color: pink.A400,\r\n      position: 'absolute',\r\n      top: '50%',\r\n      left: '50%',\r\n      marginTop: -12,\r\n      marginLeft: -12,\r\n    },\r\n    startButtonSuccess: {\r\n      backgroundColor: green[500],\r\n      '&:hover': {\r\n        backgroundColor: green[700],\r\n      },\r\n    },\r\n  }),\r\n)\r\n\r\n// Abandoned planned feature: auto start the last connected device\r\n// Due to the lack of implementations of necessary APIs in Web Bluetooth\r\n//\r\n// const AutoStartPanel = () => {\r\n//   const classes = useStyles()\r\n//   // todo\r\n//   let lastConnected = localStorage.getItem(\"lastConnected\")\r\n//   return\r\n// }\r\n\r\nconst App = () => {\r\n  const classes = useStyles()\r\n  const [inProgress, setInProgress] = React.useState(false)\r\n  const [success, setSuccess] = React.useState(false)\r\n  const [error, setError] = React.useState(\"\")\r\n  const [gattServer, setGattServer] = React.useState(Object)\r\n  const [characteristic, setCharacteristic] = React.useState(Object)\r\n  const timer = React.useRef<number>()\r\n\r\n  React.useEffect(() => {\r\n    return () => {\r\n      clearTimeout(timer.current)\r\n    }\r\n  }, [])\r\n\r\n  const startButtonClassname = clsx({\r\n    [classes.startButtonSuccess]: success,\r\n  })\r\n\r\n  const handleStartButtonClick = () => {\r\n    if (!inProgress) {\r\n      setSuccess(false)\r\n      setInProgress(true)\r\n      bluetoothStart().catch((error) => handleBluetoothError(error))\r\n      timer.current = window.setTimeout(() => {\r\n        setSuccess(true)\r\n        setInProgress(false)\r\n        setError(\"\")\r\n      }, 8000)\r\n    }\r\n  }\r\n\r\n  const handleEndButtonClick = () => {\r\n    // Always run BluetoothEnd() ; meanwhile if start button is green, reset it\r\n    bluetoothEnd()\r\n    if (success) {\r\n      setSuccess(false)\r\n    }\r\n  }\r\n\r\n  const logProgress = (x: any) => {\r\n    console.log(\"Current:\", x)\r\n    return x;\r\n  }\r\n\r\n  // Bluetooth control begins\r\n  const bluetoothStart = async () => {\r\n    // BLE device (a.k.a peripheral) => GATT server => service => characteristic => writeValue()\r\n    // Step 1/5\r\n    let bluetoothDevice = await navigator.bluetooth.requestDevice({\r\n      filters: [{ namePrefix: \"Water\" }],\r\n      optionalServices: [0xF1F0]\r\n    })\r\n    logProgress(bluetoothDevice)\r\n    // Step 2/5\r\n    let gattServer = await bluetoothDevice.gatt!.connect()\r\n    setGattServer(gattServer)\r\n    logProgress(gattServer)\r\n    // Step 3/5\r\n    let service = await gattServer.getPrimaryService(0xF1F0)\r\n    logProgress(service)\r\n    // Step 4/5\r\n    // Target characteristic name = TXD, uuid = 0xF1F1\r\n    let characteristic = await service.getCharacteristic(0xF1F1)\r\n    setCharacteristic(characteristic)\r\n    logProgress(characteristic)\r\n    // Step 5/5\r\n    const startPayload = new Uint8Array([0xFE, 0xFE, 0x09, 0xB2, 0x01, 0x2B, 0xDC, 0x00, 0x70, 0xE2, 0xEB, 0x20, 0x01, 0x01, 0x00, 0x00, 0x00, 0x6C, 0x30, 0x00])\r\n    console.log(\"Writing: \", startPayload)\r\n    await characteristic.writeValue(startPayload)\r\n  }\r\n\r\n  const bluetoothEnd = async () => {\r\n    const endPayload = new Uint8Array([0xFE, 0xFE, 0x09, 0xB3, 0x00, 0x00])\r\n    console.log(\"Writing: \", endPayload)\r\n    await characteristic.writeValue(endPayload)\r\n    await gattServer.disconnect()\r\n  }\r\n\r\n  const handleBluetoothError = (error: { toString: () => string }) => {\r\n    if (error.toString().match(/User cancelled/))\r\n      return // User's cancellation won't be considered as an error\r\n    else if (error.toString().match(/'requestDevice' of undefined/))\r\n      setError(\"找不到蓝牙硬件，或浏览器不支持。\\n\\n请参考下方“疑难解答”。\")\r\n    else if (error.toString().match(/User denied the browser permission/))\r\n      setError(\"蓝牙权限遭拒。\\n\\n请前往手机设置，授予浏览器“位置信息”权限。\\n此权限不会用于定位，详情请查看“疑难解答”。\")\r\n    else\r\n      setError(\"未知错误：\\n\" + error.toString() + \"\\n\\n这可能是一个Bug，请截图并反馈给开发者。\")\r\n  }\r\n\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {error && <ErrorDialog errorDescription={error} />}\r\n      <Grid container direction=\"column\" justify=\"flex-start\" alignItems=\"center\">\r\n\r\n        {/* Main control panel */}\r\n        <Grid item>\r\n          <Paper className={classes.paper}>\r\n            <div className={classes.button}>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                startIcon={<BathtubIcon />}\r\n                className={startButtonClassname}\r\n                disabled={inProgress}\r\n                onClick={handleStartButtonClick}>\r\n                启动\r\n              {inProgress && <CircularProgress size={24} className={classes.buttonProgress} />}\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                startIcon={<PanToolIcon />}\r\n                onClick={handleEndButtonClick}>\r\n                结束\r\n              </Button>\r\n            </div>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Credits */}\r\n        <Grid item>\r\n          <Paper className={classes.paper}>\r\n            <div className={classes.button}>\r\n              <Button variant=\"outlined\" href=\"https://github.com/celesWuff/waterctl/blob/master/FAQ.md\">\r\n                疑难解答\r\n              </Button>\r\n              <Button variant=\"outlined\" href=\"https://github.com/celesWuff/waterctl\">\r\n                源代码\r\n              </Button>\r\n            </div>\r\n          </Paper>\r\n        </Grid>\r\n\r\n      </Grid>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst ErrorDialog = (props: { errorDescription: string }) => {\r\n  const [open, setOpen] = React.useState(true)\r\n\r\n  const handleClose = () => {\r\n    setOpen(false)\r\n  }\r\n\r\n  return (\r\n    <Dialog style={{ whiteSpace: \"pre-wrap\" }}\r\n      open={open}\r\n      onClose={handleClose}\r\n      aria-labelledby=\"alert-dialog-title\"\r\n      aria-describedby=\"alert-dialog-description\"\r\n    >\r\n      <DialogContent>\r\n        <DialogContentText id=\"alert-dialog-description\">\r\n          {props.errorDescription}\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n          好\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\n// import reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log)\n"],"sourceRoot":""}